
/*
Linkle — a Connections-like puzzle with Wordle/Strands flavor.

How it works (short):
- Each puzzle has 4 categories, 4 words each (16 words). Categories are generated by selecting patterns
  (prefixes, suffixes, contains) and selecting matching words. This guarantees solvable groups.
- Modes:
  - Daily: deterministic puzzle based on current date (so everyone gets same puzzle each day).
  - Random (Refresh): generates a new random puzzle when you click the refresh button.
- Interaction:
  - Tap/click a word to select it, then click a category box to assign it.
  - Assigned words appear under their category. Click a word in a category to remove it.
  - "Check" shows which assignments are correct.
  - Progress/score is saved to localStorage.

Deployment notes:
- This single-file React component can be used as `src/App.jsx` inside a standard Create React App or Vite React project.
- Tailwind is assumed for styling (the component uses utility classes). If you don't have Tailwind, the layout will still work but styles will be plain.
- To deploy: push the project to GitHub and connect Netlify to the repo. No server functions required.

Enjoy! — Destin
*/

import React, { useEffect, useMemo, useState } from "react";

// ---------- Utility: seeded RNG ----------
function mulberry32(a) {
  return function () {
    var t = (a += 0x6d2b79f5);
    t = Math.imul(t ^ (t >>> 15), t | 1);
    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
  };
}

function hashStringToSeed(s) {
  let h = 2166136261 >>> 0;
  for (let i = 0; i < s.length; i++) {
    h ^= s.charCodeAt(i);
    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);
  }
  return h >>> 0;
}

function shuffleWith(rng, arr) {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(rng() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

// ---------- Word pools keyed by pattern type ----------
// Each entry has { type: 'prefix'|'suffix'|'contains', key: string, words: [...] }
const PATTERN_POOLS = [
  { type: "prefix", key: "over", words: [
      "overlap","overcast","overload","overtake","oversee","overturn","overboard","overreact","overrun","overgrow","overcook","overprint","overhang","overachieve","overpay"
  ]},
  { type: "prefix", key: "under", words: [
      "undergo","understand","undermine","underpass","understand","undertow","underwrite","underpaid","underwent","underbelly","understudy","underbrush","undercoat","underling"
  ]},
  { type: "prefix", key: "trans", words: [
      "transport","translate","transmit","transplant","transgress","transaction","transcribe","transcend","transfer","transfusion","transparent","transit","transatlantic","transducer"
  ]},
  { type: "suffix", key: "ness", words: [
      "kindness","brightness","sadness","wilderness","darkness","coolness","readiness","loudness","smoothness","firmness","softness","cleanliness","weakness","sharpness"
  ]},
  { type: "suffix", key: "able", words: [
      "readable","breakable","comfortable","portable","reliable","adaptable","acceptable","predictable","remarkable","dependable","traceable","approachable","searchable","payable"
  ]},
  { type: "suffix", key: "tion", words: [
      "creation","nation","celebration","rotation","education","location","operation","motion","solution","relation","condition","population","donation","reduction"
  ]},
  { type: "contains", key: "star", words: [
      "starlight","starfish","starter","starving","allstar","starboard","starburst","morstar","superstar","stardust","sidestarr","starlet","starling","starchild"
  ]},
  { type: "contains", key: "light", words: [
      "limelight","highlight","daylight","twilight","lamplight","starlight","flashlight","headlight","sunlight","moonlight","candlelight","skylight","gaslight","neonlight"
  ]},
  { type: "contains", key: "art", words: [
      "artist","cartoon","artwork","hearth","smart","earth","cartage","artistry","artery","artifact","artful","martial","cartwheel","artisan"
  ]},
  { type: "prefix", key: "auto", words: [
      "autopilot","autograph","automatic","autonomy","autodidact","autopsy","autocorrect","autobiography","autofill","autofocus","autowork","autocrat","autonomous","autoland"
  ]},
  { type: "suffix", key: "less", words: [
      "hopeless","careless","endless","motionless","aimless","limitless","timeless","speechless","restless","weightless","harmless","worthless","breathless","countless"
  ]},
  { type: "prefix", key: "re", words: [
      "reopen","rebuild","replay","rewrite","rehab","reignite","reboot","remake","retell","rethink","reclaim","repurpose","reapply","reveal"
  ]},
];

// ---------- Puzzle generator ----------
function generatePuzzleFromSeed(seed) {
  const rng = mulberry32(seed);
  // pick 4 distinct patterns from PATTERN_POOLS that have at least 4 words
  const pools = PATTERN_POOLS.filter(p => p.words.length >= 4);
  const shuffledPools = shuffleWith(rng, pools);
  const chosen = shuffledPools.slice(0, 4);

  // from each chosen pool, pick 4 distinct words
  const categories = chosen.map((p, idx) => {
    const words = shuffleWith(rng, p.words).slice(0, 4);
    return {
      id: idx,
      title: patternTitle(p),
      pattern: p,
      words,
    };
  });

  // build solution mapping word -> categoryId
  const solution = {};
  categories.forEach(cat => {
    cat.words.forEach(w => (solution[w] = cat.id));
  });

  // flattened shuffled word bank
  const allWords = shuffleWith(rng, categories.flatMap(c => c.words));

  return { categories: categories.map(c => ({ id: c.id, title: c.title })), allWords, solution };
}

function patternTitle(p) {
  if (p.type === "prefix") return `Starts with "${p.key}"`;
  if (p.type === "suffix") return `Ends with "${p.key}"`;
  return `Contains "${p.key}"`;
}

// ---------- React component ----------
export default function LinkleGame() {
  const todaySeed = useMemo(() => hashStringToSeed(new Date().toISOString().slice(0, 10)), []);

  const [mode, setMode] = useState("daily"); // 'daily' or 'random'
  const [seed, setSeed] = useState(todaySeed);
  const [puzzle, setPuzzle] = useState(() => generatePuzzleFromSeed(todaySeed));
  const [assignments, setAssignments] = useState(() => {
    try {
      const raw = localStorage.getItem("linkle_assignments");
      return raw ? JSON.parse(raw) : {};
    } catch (e) {
      return {};
    }
  });
  const [selectedWord, setSelectedWord] = useState(null);
  const [checked, setChecked] = useState(false);
  const [cooldown, setCooldown] = useState(false);

  useEffect(() => {
    // save assignments
    localStorage.setItem("linkle_assignments", JSON.stringify(assignments));
  }, [assignments]);

  useEffect(() => {
    setPuzzle(generatePuzzleFromSeed(seed));
    setAssignments({});
    setSelectedWord(null);
    setChecked(false);
  }, [seed]);

  function setDaily() {
    setMode("daily");
    const dseed = hashStringToSeed(new Date().toISOString().slice(0, 10));
    setSeed(dseed);
  }

  function refreshRandom() {
    if (cooldown) return;
    setCooldown(true);
    setTimeout(() => setCooldown(false), 500); // half-second cooldown
    setMode("random");
    const r = Math.floor(Math.random() * 0xffffffff) >>> 0;
    setSeed(r);
  }

  function handleWordClick(word) {
    if (selectedWord === word) return setSelectedWord(null);
    setSelectedWord(word);
  }

  function assignToCategory(catId) {
    if (!selectedWord) return;
    setAssignments(prev => {
      // remove word from previous category if assigned
      const next = { ...prev };
      for (const k of Object.keys(next)) {
        next[k] = next[k].filter(w => w !== selectedWord);
      }
      if (!next[catId]) next[catId] = [];
      // prevent duplicates
      if (!next[catId].includes(selectedWord)) next[catId].push(selectedWord);
      return next;
    });
    setSelectedWord(null);
  }

  function removeFromCategory(catId, word) {
    setAssignments(prev => {
      const next = { ...prev };
      next[catId] = (next[catId] || []).filter(w => w !== word);
      return next;
    });
  }

  function isCorrect(catId, word) {
    return puzzle.solution[word] === catId;
  }

  function checkAnswers() {
    setChecked(true);
  }

  function autoSolve() {
    // fill assignments correctly (for testing)
    const next = {};
    for (const w of puzzle.allWords) {
      const cid = puzzle.solution[w];
      if (!next[cid]) next[cid] = [];
      next[cid].push(w);
    }
    setAssignments(next);
    setChecked(true);
  }

  function computeScore() {
    let correct = 0;
    for (const catIdStr of Object.keys(assignments)) {
      const cid = Number(catIdStr);
      for (const w of (assignments[cid] || [])) {
        if (isCorrect(cid, w)) correct++;
      }
    }
    return { correct, total: puzzle.allWords.length };
  }

  function shareResults() {
    const { correct, total } = computeScore();
    const resultText = `Linkle ${mode === 'daily' ? 'Daily' : 'Random'} — ${correct}/${total} — seed ${seed}`;
    navigator.clipboard?.writeText(resultText);
    alert("Result copied to clipboard: " + resultText);
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 sm:p-8">
      <div className="max-w-4xl mx-auto">
        <header className="flex items-center justify-between mb-6">
          <h1 className="text-2xl sm:text-3xl font-extrabold">Linkle — Patterns & Connections</h1>
          <div className="space-x-2">
            <button className={`px-3 py-1 rounded ${mode === 'daily' ? 'bg-blue-600 text-white' : 'bg-white/60'} shadow`} onClick={setDaily}>Daily</button>
            <button className={`px-3 py-1 rounded ${mode === 'random' ? 'bg-blue-600 text-white' : 'bg-white/60'} shadow`} onClick={refreshRandom} disabled={cooldown}>{cooldown ? '...' : 'Refresh'}</button>
            <button className="px-3 py-1 rounded bg-gray-200 dark:bg-gray-800" onClick={() => { setSeed(todaySeed); setMode('daily'); }}>Reset</button>
          </div>
        </header>

        <section className="mb-4 grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="sm:col-span-2">
            <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
              <h2 className="font-semibold mb-2">Word Bank</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">Click a word, then click a category to assign it. Click an assigned word to remove it.</p>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                {puzzle.allWords.map(w => {
                  const assignedCatId = Object.keys(assignments).find(cid => (assignments[cid] || []).includes(w));
                  const isSelected = selectedWord === w;
                  return (
                    <button key={w}
                      onClick={() => handleWordClick(w)}
                      className={`px-3 py-2 rounded text-left border ${isSelected ? 'ring-2 ring-blue-400' : 'border-transparent'} ${assignedCatId ? 'opacity-60' : ''} bg-white/80 dark:bg-gray-700`}
                    >
                      <div className="font-medium">{w}</div>
                      {assignedCatId && <div className="text-xs text-gray-500">Assigned</div>}
                    </button>
                  );
                })}
              </div>
            </div>

            <div className="mt-3 flex gap-2">
              <button className="px-4 py-2 bg-green-600 text-white rounded" onClick={checkAnswers}>Check</button>
              <button className="px-4 py-2 bg-yellow-500 text-white rounded" onClick={autoSolve}>Auto-solve</button>
              <button className="px-4 py-2 bg-indigo-600 text-white rounded" onClick={shareResults}>Share</button>
            </div>

          </div>

          <div>
            <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
              <h3 className="font-semibold">Stats</h3>
              <div className="mt-2 text-sm text-gray-600 dark:text-gray-300">
                <div>Mode: <strong>{mode}</strong></div>
                <div>Seed: <strong>{seed}</strong></div>
                <div>{computeScore().correct}/{computeScore().total} correct (so far)</div>
              </div>
              <div className="mt-3 text-xs text-gray-500">Tip: Daily puzzles are seeded by date so everyone shares the same puzzle. Use Refresh for a new random puzzle.</div>
            </div>
          </div>
        </section>

        <section>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {puzzle.categories.map(cat => (
              <div key={cat.id} className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow">
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold">{cat.title}</h4>
                  <button onClick={() => assignToCategory(cat.id)} className="text-sm px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded">Assign Selected</button>
                </div>
                <div className="min-h-[80px]">
                  {(assignments[cat.id] || []).map(w => (
                    <div key={w} className={`flex items-center justify-between mb-1 p-2 rounded ${checked ? (isCorrect(cat.id, w) ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800') : 'bg-gray-100 dark:bg-gray-700'}`}>
                      <div>{w}</div>
                      <div className="flex gap-2">
                        <button onClick={() => removeFromCategory(cat.id, w)} className="text-xs px-2 py-0.5 rounded bg-white/60">remove</button>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-2 text-xs text-gray-500">Slots: {(assignments[cat.id] || []).length}/4</div>
              </div>
            ))}
          </div>
        </section>

        <footer className="mt-6 text-sm text-gray-500">
          Made with ❤️. Ideas taken from Wordle, Connections, and Strands — combined into a pattern-grouping puzzle.
        </footer>
      </div>
    </div>
  );
}

